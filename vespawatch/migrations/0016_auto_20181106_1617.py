# Generated by Django 2.1.2 on 2018-11-06 15:17

from django.db import migrations

def migrate_observations(apps, schema_editor):
    Observation = apps.get_model('vespawatch', 'Observation')
    ObservationPicture = apps.get_model('vespawatch', 'ObservationPicture')
    Individual = apps.get_model('vespawatch', 'Individual')
    IndividualPicture = apps.get_model('vespawatch', 'IndividualPicture')
    Nest = apps.get_model('vespawatch', 'Nest')
    NestPicture = apps.get_model('vespawatch', 'NestPicture')
    observations = Observation.objects.all()
    for observation in observations:
        if observation.subject == 'NE':
            nest = Nest.objects.create(
                species=observation.species,
                location=observation.location,
                observation_time=observation.observation_time,
                comments=observation.comments,
                latitude=observation.latitude,
                longitude=observation.longitude,
                inaturalist_id=observation.inaturalist_id,
                inaturalist_species=observation.inaturalist_species,
                originates_in_vespawatch=observation.originates_in_vespawatch,
                observer_title=observation.observer_title,
                observer_last_name=observation.observer_last_name,
                observer_first_name=observation.observer_first_name,
                observer_email=observation.observer_email,
                observer_phone=observation.observer_phone,
                observer_is_beekeeper=observation.observer_is_beekeeper,
                observer_approve_data_process=observation.observer_approve_data_process,
                observer_approve_display=observation.observer_approve_display,
                observer_approve_data_distribution=observation.observer_approve_data_distribution
            )
            nest.save()
            if ObservationPicture.objects.filter(observation=observation).count() > 0:
                for pic in ObservationPicture.objects.filter(observation=observation):
                    nestpic = NestPicture.objects.create(
                        observation=nest,
                        image=pic.image
                    )
                    nestpic.save()
        else:
            indiv = Individual.objects.create(
                species=observation.species,
                individual_count=observation.individual_count,
                behaviour=observation.behaviour,
                location=observation.location,
                observation_time=observation.observation_time,
                comments=observation.comments,
                latitude=observation.latitude,
                longitude=observation.longitude,
                inaturalist_id=observation.inaturalist_id,
                inaturalist_species=observation.inaturalist_species,
                originates_in_vespawatch=observation.originates_in_vespawatch,
                observer_title=observation.observer_title,
                observer_last_name=observation.observer_last_name,
                observer_first_name=observation.observer_first_name,
                observer_email=observation.observer_email,
                observer_phone=observation.observer_phone,
                observer_is_beekeeper=observation.observer_is_beekeeper,
                observer_approve_data_process=observation.observer_approve_data_process,
                observer_approve_display=observation.observer_approve_display,
                observer_approve_data_distribution=observation.observer_approve_data_distribution
            )
            indiv.save()
            if ObservationPicture.objects.filter(observation=observation).count() > 0:
                for pic in ObservationPicture.objects.filter(observation=observation):
                    nestpic = IndividualPicture.objects.create(
                        observation=indiv,
                        image=pic.image
                    )
                    nestpic.save()

class Migration(migrations.Migration):

    dependencies = [
        ('vespawatch', '0015_auto_20181106_1616'),
    ]

    operations = [
        migrations.RunPython(migrate_observations)
    ]
