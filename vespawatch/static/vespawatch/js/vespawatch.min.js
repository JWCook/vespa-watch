$(document).ready(function(){$("#lang").on("change",function(){document.forms["lang-form"].submit()})});var VwObservationsVizMap={data:function(){return{initialZoomed:!1,map:void 0,mapCircles:[],observationsLayer:void 0}},methods:{addObservationsToMap:function(){function t(t){return"individual"===t.subject?"#FD9126":"nest"===t.subject?"FD"===t.actionCode?"#3678ff":"PD"===t.actionCode?"#3678ff":(t.actionCode,"#3678ff"):"#000"}var e;this.observations.forEach(n=>{var o=L.circleMarker([n.latitude,n.longitude],{stroke:!0,weight:VWConfig.map.circle.stroke_width,color:t(n),opacity:VWConfig.map.circle.stroke_opacity,fillColor:t(n),fillOpacity:VWConfig.map.circle.fill_opacity,radius:(e=n,"individual"===e.subject?5:12),className:"circle"});o.bindPopup(this.observationToHtml(n)),this.mapCircles.push(o)}),this.observationsLayer=L.featureGroup(this.mapCircles),this.observationsLayer.addTo(this.map),this.initialZoomed||this.map.fitBounds(this.observationsLayer.getBounds()),this.initialZoomed=!0},observationToHtml:function(t){var e="";return e+="<h1>"+t.taxon+"</h1>",null!=t.observation_time&&(e+=moment(t.observation_time).format("lll")+""),null!=t.subject&&(e+="<b>subject:</b> "+t.subject),null!=t.comments&&(e+="<p>"+t.comments+"</p>"),null!=t.inaturalist_id&&(e+='<a target="_blank" href="http://www.inaturalist.org/observations/'+t.inaturalist_id+'">iNaturalist observation</a>'),t.imageUrls.length>0&&t.imageUrls.forEach(function(t){e+='<img class="theme-img-thumb" src="'+t+'">'}),e+='<a href="/'+t.subject+"s/"+t.id+"/"+(this.editRedirect?"?redirect_to="+this.editRedirect:"")+'">View details</a>'},clearMap:function(){this.observationsLayer&&(this.observationsLayer.clearLayers(),this.mapCircles=[])},init:function(){this.map=L.map("vw-map-map").setView([50.85,4.35],8),L.tileLayer("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://carto.com/attributions">CARTO</a>',subdomains:"abcd",maxZoom:20}).addTo(this.map)}},mounted:function(){this.init()},props:["autozoom","editRedirect","observations"],watch:{observations:function(t,e){console.log("vw-observations-viz-map: Observations got updated!"),this.clearMap(),this.addObservationsToMap()}},template:'<div class="mb-2" id="vw-map-map" style="height: 450px;"></div>'},VwObservationsVizTimeSlider={data:function(){return{selectedTimeRange:{}}},props:["value"],computed:{startStr:function(){return moment(this.selectedTimeRange.start).format("D MMM YYYY")},stopStr:function(){return moment(this.selectedTimeRange.stop).format("D MMM YYYY")}},methods:{init:function(){var t=document.getElementById("vw-time-slider");null!=t.noUiSlider&&t.noUiSlider.destroy(),this.selectedTimeRange={start:this.value.start,stop:this.value.stop},noUiSlider.create(t,{range:{min:this.value.start,max:this.value.stop},step:6048e5,start:[this.value.start,this.value.stop],format:wNumb({decimals:0})}),t.noUiSlider.on("set",(t,e)=>{this.selectedTimeRange.start=parseInt(t[0]),this.selectedTimeRange.stop=parseInt(t[1]),this.$emit("time-updated",t.map(t=>parseInt(t)))}),t.noUiSlider.on("slide",(t,e)=>{this.selectedTimeRange.start=parseInt(t[0]),this.selectedTimeRange.stop=parseInt(t[1])})}},watch:{value:function(t,e){this.init()}},template:'\n        <div class="row align-items-center py-2 mb-2">\n            <div class="col-2">{{ startStr }}</div>\n            <div class="col"><div id="vw-time-slider"></div></div>\n            <div class="col-2 text-right">{{ stopStr }}</div>\n        </div>\n        '},VwObservationsViz={components:{"vw-observations-viz-time-slider":VwObservationsVizTimeSlider,"vw-observations-viz-map":VwObservationsVizMap},data:function(){return{observationsUrl:VWConfig.apis.observationsUrl,observations:[],observationsCF:void 0,cfDimensions:{},timeRange:{start:void 0,stop:void 0},totalObsCount:0}},methods:{getData:function(){var t=this.observationsUrl;null!=this.zone&&(t+="?zone="+this.zone),axios.get(t).then(t=>{console.log(t.data);var e=[];t.data.individuals&&(e=e.concat(t.data.individuals)),t.data.nests&&(e=e.concat(t.data.nests)),this.setCrossFilter(e),this.totalObsCount=e.length,this.initTimerangeSlider(),this.setObservations()}).catch(function(t){console.log(t)})},initTimerangeSlider:function(){var t=this.cfDimensions.timeDim.top(1),e=this.cfDimensions.timeDim.bottom(1)[0].observation_time,n=t[0].observation_time;e===n&&n++,this.timeRange={start:e,stop:n}},setCrossFilter:function(t){this.observationsCF=crossfilter(t),this.cfDimensions.timeDim=this.observationsCF.dimension(function(t){return t.observation_time})},setObservations:function(){this.observations=this.cfDimensions.timeDim.top(this.totalObsCount)},filterOnTimeRange:function(t){this.cfDimensions.timeDim.filterRange(t),this.setObservations()}},mounted:function(){"1"===this.loadData&&this.getData()},props:["zone","loadData","editRedirect"],watch:{loadData:function(t,e){"1"===t&&this.getData()},zone:function(t,e){console.log("new zone passed in: "),console.log(t),this.getData()}},template:'\n        <section>\n            <vw-observations-viz-map v-bind:observations="observations" v-bind:edit-redirect="editRedirect"></vw-observations-viz-map>\n            <vw-observations-viz-time-slider v-on:time-updated="filterOnTimeRange" v-model="timeRange"></vw-observations-viz-time-slider>\n        </section>\n        '},VwManagementActionModal={data:function(){return{actionOutcomesUrl:VWConfig.apis.actionOutcomesUrl,saveActionUrl:VWConfig.apis.actionSaveUrl,loadActionUrl:VWConfig.apis.actionLoadUrl,deleteActionUrl:VWConfig.apis.actionDeleteUrl,availabeOutcomes:[],errors:[],actionTime:"",outcome:"",personName:"",duration:""}},props:{mode:String,nestId:Number,actionId:Number},computed:{durationInMinutes:{get:function(){return this.duration/60},set:function(t){this.duration=60*t}},modalTitle:function(){return"add"===this.mode?gettext("New management action"):gettext("Edit management action")},outcomeLabel:function(){return gettext("Outcome")},saveLabel:function(){return gettext("Save")},cancelLabel:function(){return gettext("Cancel")},deleteLabel:function(){return gettext("Delete")},nameLabel:function(){return gettext("Person name")},actionTimeLabel:function(){return gettext("Action time")},durationLabel:function(){return gettext("Duration")},inMinutesLabel:function(){return gettext("in minutes")},errorsLabel:function(){return gettext("Errors")}},methods:{populateFromServer:function(){axios.get(this.loadActionUrl,{params:{action_id:this.actionId}}).then(t=>{console.log("received response",t),this.actionTime=t.data.action_time,this.outcome=t.data.outcome,this.duration=t.data.duration,this.personName=t.data.person_name})},deleteAction:function(){var t=this;axios.delete(this.deleteActionUrl,{params:{action_id:this.actionId}}).then(e=>{"OK"===e.data.result&&t.$emit("close",!0)},t=>{console.log("Error")})},save:function(){const t=new URLSearchParams;t.append("nest",this.nestId),t.append("action_time",this.actionTime),t.append("outcome",this.outcome),t.append("person_name",this.personName),t.append("duration",this.duration),"edit"===this.mode&&t.append("action_id",this.actionId);var e=this;axios.post(this.saveActionUrl,t).then(function(t){"OK"===t.data.result&&e.$emit("close",!0)}).catch(function(t){e.errors=t.response.data.errors})},loadOutcomes:function(){return axios.get(this.actionOutcomesUrl).then(t=>{this.availabeOutcomes=t.data}).catch(function(t){console.log(t)})}},mounted:function(){this.loadOutcomes().then(()=>{"edit"===this.mode&&this.populateFromServer()})},template:'\n<transition name="modal">\n      <div class="modal-mask">\n        <div class="modal-wrapper">\n\n        <div class="modal-dialog" role="document">\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h5 class="modal-title">{{ modalTitle }}</h5>\n                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">\n                    <span aria-hidden="true" @click="$emit(\'close\', false)">&times;</span>\n                    </button>\n                </div>\n                <div class="modal-body">\n                    <div v-if="Object.keys(errors).length !== 0">\n                        <h6>{{ errorsLabel }}</h6>\n                        <ul > \n                            <li v-for="(errorList, fieldName) in errors">\n                                {{ fieldName }}:\n                                <span v-for="(err, index) in errorList">{{ err }} <span v-if="errorList.length-1<index">, </span> </span>\n                            </li>\n                        </ul>\n                    </div>\n                    <form>\n                        <div class="form-group">\n                            <label for="outcome">{{ outcomeLabel }} *</label>\n                            <select v-model="outcome" class="form-control" id="outcome">\n                                <option :value="outcome.value" v-for="outcome in availabeOutcomes">{{ outcome.label }}</option>\n                            </select>\n                            <label for="personName">{{ nameLabel }}</label>\n                            <input v-model="personName" class="form-control" type="text" id="personName">\n                            \n                            <datetime v-model="actionTime" type="datetime" \n                                input-class="datetimeinput form-control">\n                                <label for="startDate" slot="before">{{ actionTimeLabel }} *</label>          \n                            </datetime>\n               \n                            <label for="duration">{{ durationLabel }}</label>\n                            <input v-model="durationInMinutes" class="form-control" type="number" id="duration">\n                            <small class="form-text text-muted">({{ inMinutesLabel }})</small>\n                        </div>\n                    </form>\n                </div>\n                <div class="modal-footer">\n                    <button type="button" class="btn btn-dark" @click="$emit(\'close\', false)">{{ cancelLabel }}</button>\n                    <button type="button" class="btn btn-primary" @click="save()">{{ saveLabel }}</button>\n                    <button v-if="mode === \'edit\'" type="button" @click="deleteAction()" class="btn btn-danger">{{ deleteLabel }}</button>\n                </div>\n            </div>\n        </div>\n\n        </div>\n      </div>\n    </transition>'},VwManagmentTableNestRow={components:{"vw-management-action-modal":VwManagementActionModal},computed:{hasManagementAction:function(){return""!==this.nest.action},managementActionID:function(){return this.nest.actionId},cannotEditLabel:function(){return gettext("You cannot edit this observation")},cannotEditTitle:function(){return gettext("This observation was created on iNaturalist. You cannot edit it here")},editStr:function(){return gettext("edit")},addStr:function(){return gettext("add")},editStr:function(){return gettext("edit")},managementAction:function(){return gettext(this.nest.action)},nestClass:function(){return this.nest.action?"":"table-danger"},observationTimeStr:function(){return moment(this.nest.observation_time).format("lll")}},props:["nest"],data:function(){return{addActionModalOpened:!1,editActionModalOpened:!1}},methods:{showNewActionModal:function(){this.addActionModalOpened=!0},hideNewActionModal:function(t){this.addActionModalOpened=!1,t&&console.log("Data has changed, must refresh...")},showEditActionModal:function(){this.editActionModalOpened=!0},hideEditActionModal:function(t){this.editActionModalOpened=!1,t&&console.log("Data has changed, must refresh...")}},template:'\n        <tr :class="nestClass">\n            <td>{{ observationTimeStr }}</td>\n            \n            <td>{{ nest.address }}</td>\n            \n            <td>\n                <span v-if="hasManagementAction">\n                    {{ managementAction }}\n                    <button v-on:click="showEditActionModal()" class="btn btn-outline-info btn-sm">{{ editStr }}</button>\n                </span>\n                \n                <button v-else v-on:click="showNewActionModal()" class="btn btn-outline-info btn-sm">{{ addStr }}</button>\n                \n                <vw-management-action-modal v-if="editActionModalOpened" v-on:close="hideEditActionModal" mode="edit" :nest-id="nest.id" :action-id="nest.actionId"></vw-management-action-modal>\n                <vw-management-action-modal v-if="addActionModalOpened" v-on:close="hideNewActionModal" mode="add" :nest-id="nest.id"></vw-management-action-modal>\n            </td>\n            \n            <td>\n                    <a v-if="nest.originates_in_vespawatch" v-bind:href="nest.updateUrl">{{ editStr }}</a>\n                    <span v-if="!nest.originates_in_vespawatch" v-bind:title="cannotEditTitle">{{ cannotEditLabel }}</span>\n            </td>\n        </tr>\n        '},VwManagementTable={components:{"vw-management-table-nest-row":VwManagmentTableNestRow},computed:{dateStr:function(){return gettext("date")},addressStr:function(){return gettext("address")},managementStr:function(){return gettext("management")},nestClass:function(){return"table-danger"}},data:function(){return{_nests:[]}},mounted:function(){null!=this.zone?this.$root.loadNests(this.zone):this.$root.loadNests()},props:["nests","zone"],watch:{nests:function(t,e){this._nests=t}},template:'\n        <div class="row">\n        <table class="table">\n            <thead>\n                <tr>\n                    <th>{{ dateStr }}</th>\n                    <th>{{ addressStr }}</th>\n                    <th>{{ managementStr }}</th>\n                    <th></th>\n                </tr>\n            </thead>\n\n            <vw-management-table-nest-row v-for="nest in nests" v-bind:nest="nest" :key="nest.id">\n            </vw-management-table-nest-row>\n        </table>\n    </div>\n    '},VwLocationSelectorLocationInput={data:function(){return{location:this.initAddress?""+this.initAddress:""}},computed:{positionLabel:function(){return gettext("Position")},searchLabel:function(){return gettext("Search")},detectPositionLabel:function(){return gettext("Detect current position")},orLabel:function(){return gettext("or")},typeALocationLabel:function(){return gettext('type a location here and click "Search"...')}},methods:{search:function(){this.$emit("search",this.location)}},props:["initAddress"],template:'\n        <div class="form-group">\n            <label for="id_position">{{positionLabel}}</label>\n            <div class="input-group">\n                <button class="btn btn-secondary" v-on:click.stop.prevent="$emit(\'autodetect-btn\')">{{ detectPositionLabel }}</button>\n                <label>{{ orLabel }}</label>\n                <input type="text" class="form-control" id="id_position" name="position" v-model="location" :placeholder="typeALocationLabel">\n                <div class="input-group-append">\n                    <button type="button" class="btn btn-secondary" v-on:click="search" >{{ searchLabel }}</button>\n                </div>\n            </div>\n        </div>\n        '},VwLocationSelectorMap={computed:{leafletPosition:function(){return[this.position[1],this.position[0]]}},data:function(){return{map:null,mapZoom:8,marker:null}},methods:{emitLongLat:function(){this.$emit("marker-move",[this.marker.getLatLng().lng,this.marker.getLatLng().lat])},setMarker:function(t,e){console.log("setting marker"),void 0!=this.marker&&this.map.removeLayer(this.marker),this.marker=L.marker([e,t],{draggable:!0}).addTo(this.map),this.marker.on("dragend",t=>{this.emitLongLat()})}},mounted:function(){this.map=L.map("vw-location-selector-map-map").setView(this.leafletPosition,this.mapZoom),L.tileLayer("https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}{r}.png").addTo(this.map),"true"===this.initMarker?(console.log("init with a marker"),this.setMarker(this.position[0],this.position[1]),this.map.setZoom(16),this.map.panTo(new L.LatLng(this.position[1],this.position[0]))):console.log("don't add a marker")},props:["position","initMarker"],template:'<div class="mb-2" id="vw-location-selector-map-map" style="height: 200px;"></div>',watch:{position:function(t,e){console.log("Map: position updated"),console.log(t),this.setMarker(t[0],t[1]),this.map.setZoom(16),this.map.panTo(new L.LatLng(t[1],t[0]))}}},VwLocationSelectorCoordinates={computed:{lat:{get:function(){return this.latitude},set:function(t){this.$emit("lat-updated",t)}},long:{get:function(){return this.longitude},set:function(t){this.$emit("lon-updated",t)}},latitudeLabel:function(){return gettext("Latitude")},longitudeLabel:function(){return gettext("Longitude")},addressLabel:function(){return gettext("Address")},_address:{get:function(){return this.address},set:function(){}}},props:["longitude","latitude","address"],template:'\n        <div class="form-row">\n            <div class="form-group col-md-3" id="div_id_latitude">\n                <label for="id_latitude">{{latitudeLabel}}</label>\n                <input type="text" class="form-control numberinput" id="id_latitude" name="latitude" v-model="lat">\n            </div>\n            <div class="form-group col-md-3" id="div_id_longitude">\n                <label for="id_longitude">{{longitudeLabel}}</label>\n                <input type="text" class="form-control numberinput" id="id_longitude" name="longitude" v-model="long">\n            </div>\n            <div class="form-group col-md-6" id="div_id_address">\n                <label for="id_address">{{addressLabel}}</label>\n                <input type="text" class="form-control numberinput" id="id_address" name="address" v-model="_address">\n            </div>\n        </div>\n        '},VwTaxonSelectorEntry={delimiters:["[[","]]"],props:{taxon:Object,radioName:String,pictureAttribute:String,selected:{type:Boolean,default:!1}},methods:{getRadioId:function(t){return"taxonRadios"+t.id}},template:'\n        <div class="card">\n            <div class="card-body">\n                <h5 class="card-title">[[ taxon.name ]]</h5>\n            \n                <img class="card-img-top" :src="taxon[pictureAttribute]" style="width: 100px;">\n            \n                <input class="form-check-input" type="radio" :name="radioName" :id="getRadioId(taxon)" :value="taxon.id" :checked="selected">\n                        \n                <label class="form-check-label" :for="getRadioId(taxon)">\n                    [[ taxon.name ]]\n                </label>\n            </div>\n        </div>'},VwTaxonSelector={components:{"vw-taxon-selector-entry":VwTaxonSelectorEntry},delimiters:["[[","]]"],props:{taxonApiUrl:String,radioName:String,taxonSelected:Number,mode:String},computed:{buttonLabel:function(){return gettext("Show more species")},pictureAttrName:function(){switch(this.mode){case"nest":return"identification_picture_nest_url";case"individual":return"identification_picture_individual_url"}}},data:function(){return{taxaData:[],showAll:!1}},methods:{showAllIfNeeded:function(){if(this.taxonSelected){var t=this;this.taxaData.find(function(e){return e.id===t.taxonSelected}).identification_priority||(this.showAll=!0)}},getData:function(){axios.get(this.taxonApiUrl).then(t=>{this.taxaData=t.data,this.showAllIfNeeded()}).catch(function(t){console.log(t)})}},mounted:function(){this.getData()},template:'<div class="form-group">\n                    <div v-for="taxon in taxaData" v-if="taxon.identification_priority" class="form-check-inline">\n                        <vw-taxon-selector-entry :taxon="taxon" :picture-attribute="pictureAttrName" :radio-name="radioName" :selected="taxon.id == taxonSelected"></vw-taxon-selector-entry>\n                    </div> \n                    \n                    <div>\n                        <button class="btn btn-outline-primary btn-sm" v-if="!showAll" v-on:click.stop.prevent="showAll = true">[[ buttonLabel ]]</button>\n                    </div>\n                    \n                    <div v-if="showAll">\n                        <div v-for="taxon in taxaData" v-if="!taxon.identification_priority" class="form-check-inline">\n                            <vw-taxon-selector-entry :taxon="taxon" :picture-attribute="pictureAttrName" :radio-name="radioName" :selected="taxon.id == taxonSelected"></vw-taxon-selector-entry>\n                        </div>\n                    </div>          \n               </div>'},VwDatetimeSelector={delimiters:["[[","]]"],props:{initDateTime:String,isRequired:Boolean,hiddenFieldName:String},data:function(){return{observationTime:void 0}},computed:{observationTimeLabel:function(){return gettext("Observation date")}},mounted:function(){this.initDateTime&&(this.observationTime=this.initDateTime)},template:'<div class="form-group">\n                    <datetime v-model="observationTime" type="datetime" \n                              input-class="datetimeinput form-control">\n                        <label for="startDate" slot="before">\n                            [[ observationTimeLabel ]]\n                            <span v-if="isRequired">*</span>\n                        </label>          \n                    </datetime>\n                    <input type="hidden" :name="hiddenFieldName" :value="observationTime"/>\n               </div>'},VwLocationSelector={data:function(){return{bbox:[[50.2,4.4],[50.9,4.9]],locationCoordinates:[this.initCoordinates[0],this.initCoordinates[1]],markerCoordinates:[this.initCoordinates[0],this.initCoordinates[1]],modelAddress:this.address?""+this.address:"",provider:new GeoSearch.OpenStreetMapProvider({params:{countrycodes:"BE"}})}},computed:{locationLng:function(){return this.locationCoordinates?this.locationCoordinates[0]:this.initCoordinates[0]},locationLat:function(){return this.locationCoordinates?this.locationCoordinates[1]:this.initCoordinates[1]}},components:{"vw-location-selector-location-input":VwLocationSelectorLocationInput,"vw-location-selector-map":VwLocationSelectorMap,"vw-location-selector-coordinates":VwLocationSelectorCoordinates},methods:{autodetectPosition:function(){var t=this;navigator.geolocation.getCurrentPosition(function(e){t.setCoordinates([e.coords.longitude,e.coords.latitude]),t.markerCoordinates=[e.coords.longitude,e.coords.latitude]})},getCoordinates:function(t){console.log("Address input changed to "+t+"+\n -> get coordinates and update locationCoordinates and markerCoordinates"),this.provider.search({query:t}).then(t=>{var e=t[0];console.log(t),this.locationCoordinates=[e.x,e.y],this.markerCoordinates=[e.x,e.y],this.modelAddress=e.label})},reverseGeocode:function(){var t=this;axios.get("https://nominatim.openstreetmap.org/reverse",{params:{format:"jsonv2",lat:t.locationCoordinates[1],lon:t.locationCoordinates[0]}}).then(e=>{t.modelAddress=e.data.display_name})},setCoordinates:function(t){console.log("Marker moved. Set locationCoordinates and update address."),this.locationCoordinates=t,this.reverseGeocode()},updateLatitude:function(t){console.log("latitude was updated"),this.markerCoordinates=[this.markerCoordinates[0],t]},updateLongitude:function(t){console.log("longitude was updated"),this.markerCoordinates=[t,this.markerCoordinates[1]]}},props:["initCoordinates","initMarker","address"],template:'\n        <section>\n            <vw-location-selector-location-input v-bind:init-address="address" v-on:autodetect-btn="autodetectPosition" v-on:search="getCoordinates"></vw-location-selector-location-input>\n            <vw-location-selector-map v-bind:init-marker="initMarker" v-bind:position="markerCoordinates" v-on:marker-move="setCoordinates"></vw-location-selector-map>\n            <vw-location-selector-coordinates v-bind:longitude="locationLng" v-bind:latitude="locationLat" v-bind:address="modelAddress" v-on:lon-updated="updateLongitude" v-on:lat-updated="updateLatitude"></vw-location-selector-coordinates>\n        </section>\n        '},app=new Vue({components:{"vw-observations-viz":VwObservationsViz,"vw-location-selector":VwLocationSelector,"vw-datetime-selector":VwDatetimeSelector,"vw-management-table":VwManagementTable,"vw-taxon-selector":VwTaxonSelector},data:{individuals:null,nests:null},delimiters:["[[","]]"],el:"#vw-main-app",methods:{loadNests:function(t){let e=VWConfig.apis.observationsUrl+"?type=nest";null!=t&&(e=e+"&zone="+t),axios.get(e).then(t=>{t.data.nests&&(this.nests=t.data.nests)}).catch(function(t){console.log(t)})}}});